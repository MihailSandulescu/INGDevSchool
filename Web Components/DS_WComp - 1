web:

spatiu informational al resurselor(html cel mai important)  identificate prin adrese, care pot fi interconectate prn lincuri si accesate prin internet

w3c - adopta toate standardele legate de html, http, css etc

modelul de comunicare web: arhitectura client-server

user agent -> client web (browserul)

client -> http -> server

browser sniffing / feature sniffing

window.navigator / window.navigator.userAgent

uri = url + urn(resource name)

url = schema(protocolul)://host(hostname+port)/path?query#fragment(o anumita pozitie intr-o pagina html)

urn = urn:isbn:1237....(nu se folosesc in contextul web)

	query params -> cheie=valoare&cheie=valoare ... (se mai foloseste si ; in loc de &)

request = secventa de linii, prima linie e metoda requestului

GET url-ul protocolul folosit
headers (cheie valoare)

body

curl -v example.com

verbe http : get si delete nu accepta verbe

path param

RESTful API

sources -> new snippet:

//getting all resources:

fetch('https://jsonplaceholder.typicode.com/posts')
    .then(response => response.json())
    .then(json => console.log(json));

//getting a specific resource:

fetch('https://jsonplaceholder.typicode.com/posts/2')
    .then(response => response.json())
    .then(json => console.log(json));

//getting some resources based on filtering:

fetch('https://jsonplaceholder.typicode.com/posts?userId=1')
    .then(response => response.json())
    .then(json => console.log(json));

//creating a new resource:

fetch('https://jsonplaceholder.typicode.com/posts', {
    method: 'POST',
    headers: {
        "Content-type": "application/json; charset=UTF-8"
    },
    body: JSON.stringify({
        title: 'foo',
        body: 'bar',
        userId: 1
    }),
})
    .then(response => response.json())
    .then(json => console.log(json));

// update an existing resource:

fetch('https://jsonplaceholder.typicode.com/posts/2', {
    method: 'PUT',
    body: JSON.stringify({
        id: 1,
        title: 'foo',
        body: 'bar',
        userId: 1
    }),
    headers: {
        "Content-type": "application/json; charset=UTF-8"
    }
})
    .then(response => response.json())
    .then(json => console.log(json));

//partially updating a specific resource:

fetch('https://jsonplaceholder.typicode.com/posts/1', {
    method: 'PATCH',
    headers: {
        "Content-type": "application/json; charset=UTF-8"
    },
    body: JSON.stringify({
        title: 'foo'
    }),
})
    .then(response => response.json())
    .then(json => console.log(json));

//deleting a specific resource: 

fetch('https://jsonplaceholder.typicode.com/posts/1', {
    method: 'DELETE'
});

DOM = document object model = structura arborescenta html

window.document -> manipularea interfetei dom

BOM API = browser object model

window.navigator
window.location


html -> interpretat, nu compilat


